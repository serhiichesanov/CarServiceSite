openapi: 3.0.1
info:
  title: Store API
  description: Simple store API.
  version: 1.0.0
  
servers:
  - url: http://api.store.com/v1
    description: Main store server

tags:
- name: product
  description: Everything about your Products
- name: store
  description: Access to store orders
- name: user
  description: Operations about user

paths:
  /product:
    post:
      tags:
      - product
      summary: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Product object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - store_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
  /product/{productId}:
    get:
      tags:
      - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
      - name: productId
        in: path
        description: ID of product to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - product
      summary: Updates a product in the store with form data
      operationId: updateProductWithForm
      parameters:
      - name: productId
        in: path
        description: ID of product that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the product
                status:
                  type: string
                  description: Updated status of the product
      responses:
        200:
          description: successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - store_auth:
        - write:products
        - read:products
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: productId
        in: path
        description: Product id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
      security:
      - store_auth:
        - write:products
        - read:products
  /product/{productId}/uploadImage:
    post:
      tags:
      - product
      summary: Uploads an image
      operationId: uploadFile
      parameters:
      - name: productId
        in: path
        description: ID of product to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
        400:
          description: bad request

      security:
      - store_auth:
        - write:products
        - read:products
  /store:
    post:
      tags:
      - store
      summary: Place an order
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the product
        content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      security:
      - store_auth:
        - create:order
      x-codegen-request-body-name: body
  /store/orders:
    get:
        tags:
        - store
        summary: Returns a list of orders
        operationId: getOrders
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Orders'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Orders'
        security:
        - api_key: []
  /store/inventory:
    get:
        tags:
        - store
        summary: Returns a list of products
        operationId: getInventory
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Inventory'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Inventory'
        security:
        - store_auth:
          - write:orders
  /store/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1.         Other values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be fetched
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
        - store_auth:
          - write:orders
    put:
          tags:
          - store
          summary: Update order by ID
          description: This can only be done by the logged in user.
          operationId: updateOrder
          parameters:
          - name: orderId
            in: path
            description: ID of order that needs to be fetched
            required: true
            schema:
              type: string
          requestBody:
            description: Updated user object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Order'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Order'
            required: true
          responses:
            200:
              description: Success
            400:
              description: Invalid ID supplied
              content: {}
            404:
              description: Order not found
              content: {}
          security:
          - store_auth:
            - write:orders
          x-codegen-request-body-name: body
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
        - store_auth:
          - write:orders
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: bad request
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful operation
          content: {}
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: userId
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - store_auth:
          - read:users
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - store_auth:
          - admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - store_auth:
          - admin
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Inventory:
      properties:
        inventory:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          uniqueItems: true
    Orders:
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          uniqueItems: true
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Product:
      required:
      - name
      - photoUrls
      - count
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: beans
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        count:
          minimum: 1.0
          maximum: 1024.0
          type: integer
          format: int64
        status:
          type: string
          description: product status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Product
  securitySchemes:
    store_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://api.store.com/oauth/dialog
          scopes:
            write:products: modify products in your account
            read:products: read your products
            read:orders: read orders
            read:users: read users
            write:orders: write orders
            admin: admin priviledges
    api_key:
      type: apiKey
      name: api_key
      in: header
